{
  "active": false,
  "connections": {
    "Split Script": {
      "main": [
        [
          {
            "node": "Merge Video + Music",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Music File URL": {
      "main": [
        [
          {
            "node": "Generate Script (GPT-4o-mini)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Final Video URL": {
      "main": [
        [
          {
            "node": "Generate Social Caption (GPT-4)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Video + Music": {
      "main": [
        [
          {
            "node": "Wait for Fusion Completion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get blotato Video URL": {
      "main": [
        [
          {
            "node": "Merge Video Data (Image or Prompt)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert Image to Video": {
      "main": [
        [
          {
            "node": "Wait for Image-to-Video Rendering",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Image File URL": {
      "main": [
        [
          {
            "node": "Upload Image to Cloudinary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Video to Blotato": {
      "main": [
        [
          {
            "node": "Post to Instagram",
            "type": "main",
            "index": 0
          },
          {
            "node": "Post to YouTube",
            "type": "main",
            "index": 0
          },
          {
            "node": "Post to TikTok",
            "type": "main",
            "index": 0
          },
          {
            "node": "Post to Facebook Page",
            "type": "main",
            "index": 0
          },
          {
            "node": "Post to Threads",
            "type": "main",
            "index": 0
          },
          {
            "node": "Post to Twitter (X)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Post to LinkedIn",
            "type": "main",
            "index": 0
          },
          {
            "node": "Post to Bluesky",
            "type": "main",
            "index": 0
          },
          {
            "node": "Post to Pinterest",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Caption to Telegram": {
      "main": [
        [
          {
            "node": "Assign Platform IDs for Blotato",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Music with Piapi": {
      "main": [
        [
          {
            "node": "Wait for Music Generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Image-Based Video URL": {
      "main": [
        [
          {
            "node": "Merge Video Data (Image or Prompt)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for Music Generation": {
      "main": [
        [
          {
            "node": "Get Music File URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate SEO Title (GPT-4)": {
      "main": [
        [
          {
            "node": "Append Video Data to Google Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Image to Cloudinary": {
      "main": [
        [
          {
            "node": "Convert Image to Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for Fusion Completion": {
      "main": [
        [
          {
            "node": "Get Final Video URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Video with blotato": {
      "main": [
        [
          {
            "node": "Wait for blotato Video Rendering",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Prompt or Image Input": {
      "main": [
        [
          {
            "node": "Condition Input Type (Image or Text)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Image from Telegram": {
      "main": [
        [
          {
            "node": "Extract Image File URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Final Video to Telegram": {
      "main": [
        [
          {
            "node": "Send Caption to Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Script (GPT-4o-mini)": {
      "main": [
        [
          {
            "node": "Split Script",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Assign Platform IDs for Blotato": {
      "main": [
        [
          {
            "node": "Upload Video to Blotato",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Social Caption (GPT-4)": {
      "main": [
        [
          {
            "node": "Generate SEO Title (GPT-4)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger Telegram Prompt or Image": {
      "main": [
        [
          {
            "node": "Split Prompt or Image Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for blotato Video Rendering": {
      "main": [
        [
          {
            "node": "Get blotato Video URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append Video Data to Google Sheet": {
      "main": [
        [
          {
            "node": "Send Final Video to Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for Image-to-Video Rendering": {
      "main": [
        [
          {
            "node": "Get Image-Based Video URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Video Data (Image or Prompt)": {
      "main": [
        [
          {
            "node": "Generate Music with Piapi",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Condition Input Type (Image or Text)": {
      "main": [
        [
          {
            "node": "Generate Video with blotato",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download Image from Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-04-24T06:10:14.160Z",
  "id": "i9yo5mo5FaZoVtnq",
  "meta": {
    "templateId": "3654"
  },
  "name": "使用 Telegram、GPT-4 和 Blotato 自动创建和发布 AI 社交视频",
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "https://backend.blotato.com/v2/media",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "blotato-api-key"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "url",
              "value": "={{ $('Append Video Data to Google Sheet').item.json['url '] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "b8a41b63-8c48-4964-befe-b949f3e9b755",
      "name": "Upload Video to Blotato",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2960,
        1160
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://backend.blotato.com/v2/posts",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "blotato-api-key"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"post\": {\n    \"accountId\": \"{{ $('Assign Platform IDs for Blotato').item.json.instagram_id }}\",\n    \"target\": {\n      \"targetType\": \"instagram\"\n    },\n    \"content\": {\n      \"text\": \"{{ $('Append Video Data to Google Sheet').item.json.caption }}\",\n      \"platform\": \"instagram\",\n      \"mediaUrls\": [\n        \"{{ $json.url }}\"\n      ]\n    }\n  }\n}\n",
        "options": {}
      },
      "id": "ac7a8bf1-b9ec-4a25-8c14-6d90abbc5568",
      "name": "Post to Instagram",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        3180,
        360
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://backend.blotato.com/v2/posts",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "blotato-api-key"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"post\": {\n    \"accountId\": \"{{ $('Assign Platform IDs for Blotato').item.json.youtube_id }}\",\n    \"target\": {\n      \"targetType\": \"youtube\",\n      \"title\": \"{{ $('Append Video Data to Google Sheet').item.json.Title }}\",\n      \"privacyStatus\": \"unlisted\",\n      \"shouldNotifySubscribers\": \"false\"\n    },\n    \"content\": {\n      \"text\": \"{{ $('Append Video Data to Google Sheet').item.json.caption }}\",\n      \"platform\": \"youtube\",\n      \"mediaUrls\": [\n        \"{{ $json.url }}\"\n      ]\n    }\n  }\n}",
        "options": {}
      },
      "id": "be0a1831-c0e3-4753-b114-2cd7cc66fae2",
      "name": "Post to YouTube",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        3180,
        560
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://backend.blotato.com/v2/posts",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "blotato-api-key"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"post\": {\n    \"accountId\": \"{{ $('Assign Platform IDs for Blotato').item.json.tiktok_id }}\",\n    \"target\": {\n      \"targetType\": \"tiktok\",\n      \"isYourBrand\": \"false\", \n      \"disabledDuet\": \"false\",\n      \"privacyLevel\": \"PUBLIC_TO_EVERYONE\",\n      \"isAiGenerated\": \"true\",\n      \"disabledStitch\": \"false\",\n      \"disabledComments\": \"false\",\n      \"isBrandedContent\": \"false\"\n      \n    },\n    \"content\": {\n      \"text\": \"{{ $('Append Video Data to Google Sheet').item.json.caption }}\",\n      \"platform\": \"tiktok\",\n      \"mediaUrls\": [\n        \"{{ $json.url }}\"\n      ]\n    }\n  }\n}\n",
        "options": {}
      },
      "id": "62087008-dd5a-49f4-a764-a10b1c82e4e0",
      "name": "Post to TikTok",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        3180,
        760
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://backend.blotato.com/v2/posts",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "blotato-api-key"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"post\": {\n    \"accountId\": \"{{ $('Assign Platform IDs for Blotato').item.json.facebook_id }}\",\n    \"target\": {\n      \"targetType\": \"facebook\",\n      \"pageId\": \"{{ $('Assign Platform IDs for Blotato').item.json.facebook_page_id }}\"\n\n      \n    },\n    \"content\": {\n      \"text\": \"{{ $('Append Video Data to Google Sheet').item.json.caption }}\",\n      \"platform\": \"facebook\",\n      \"mediaUrls\": [\n        \"{{ $json.url }}\"\n      ]\n    }\n  }\n}",
        "options": {}
      },
      "id": "976b075d-c98b-45a4-bf76-06a34d5ccbf3",
      "name": "Post to Facebook Page",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        3180,
        960
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://backend.blotato.com/v2/posts",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "blotato-api-key"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"post\": {\n    \"accountId\": \"{{ $('Assign Platform IDs for Blotato').item.json.threads_id }}\",\n    \"target\": {\n      \"targetType\": \"threads\"\n      \n    },\n    \"content\": {\n      \"text\": \"{{ $('Append Video Data to Google Sheet').item.json.caption }}\",\n      \"platform\": \"threads\",\n      \"mediaUrls\": [\n        \"{{ $json.url }}\"\n      ]\n    }\n  }\n}",
        "options": {}
      },
      "id": "c689c5d4-f63c-4fc2-b2d6-e1d2d03a236a",
      "name": "Post to Threads",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        3180,
        1160
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://backend.blotato.com/v2/posts",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "blotato-api-key"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"post\": {\n    \"accountId\": \"{{ $('Assign Platform IDs for Blotato').item.json.twitter_id }}\",\n    \"target\": {\n      \"targetType\": \"twitter\"\n      \n    },\n    \"content\": {\n      \"text\": \"{{ $('Append Video Data to Google Sheet').item.json.caption }}\",\n      \"platform\": \"twitter\",\n      \"mediaUrls\": [\n        \"{{ $json.url }}\"\n      ]\n    }\n  }\n}\n",
        "options": {}
      },
      "id": "88c8bd03-342e-4844-9489-28a5a93426e0",
      "name": "Post to Twitter (X)",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        3180,
        1360
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://backend.blotato.com/v2/posts",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "blotato-api-key"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"post\": {\n    \"accountId\": \"{{ $('Assign Platform IDs for Blotato').item.json.linkedin_id }}\",\n    \"target\": {\n      \"targetType\": \"linkedin\"\n      \n    },\n    \"content\": {\n      \"text\": \"{{ $('Append Video Data to Google Sheet').item.json.caption }}\",\n      \"platform\": \"linkedin\",\n      \"mediaUrls\": [\n        \"{{ $json.url }}\"\n      ]\n    }\n  }\n}\n",
        "options": {}
      },
      "id": "db6fb042-731e-46ce-8f4d-07e2b427739c",
      "name": "Post to LinkedIn",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        3180,
        1560
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://backend.blotato.com/v2/posts",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "blotato-api-key"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"post\": {\n    \"accountId\": \"{{ $('Assign Platform IDs for Blotato').item.json.bluesky_id }}\",\n    \"target\": {\n      \"targetType\": \"bluesky\"\n      \n    },\n    \"content\": {\n      \"text\": \"{{ $('Append Video Data to Google Sheet').item.json.caption }}\",\n      \"platform\": \"bluesky\",\n      \"mediaUrls\": [\n        \"https://pbs.twimg.com/media/GE8MgIiWEAAfsK3.jpg\"\n      ]\n    }\n  }\n}\n",
        "options": {}
      },
      "id": "2102531c-624a-49b6-8b99-7a43e5067585",
      "name": "Post to Bluesky",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        3180,
        1760
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://backend.blotato.com/v2/posts",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "blotato-api-key"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"post\": {\n    \"accountId\": \"{{ $('Assign Platform IDs for Blotato').item.json.pinterest_id }}\",\n    \"target\": {\n      \"targetType\": \"pinterest\",\n      \"boardId\": \"{{ $('Assign Platform IDs for Blotato').item.json.pinterest_board_id }}\"      \n    },\n    \"content\": {\n      \"text\": \"{{ $('Append Video Data to Google Sheet').item.json.caption }}\",\n      \"platform\": \"pinterest\",\n      \"mediaUrls\": [\n        \"https://pbs.twimg.com/media/GE8MgIiWEAAfsK3.jpg\"\n      ]\n    }\n  }\n}\n",
        "options": {}
      },
      "id": "a9826150-6e26-4174-af74-1b4dd8016638",
      "name": "Post to Pinterest",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        3180,
        1960
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "content": "# 🟥 第五步 — 自动发布至9大社交平台  \n## 最终环节通过Blotato API实现全自动分发  \n\n（技术实现说明：  \n1. 多平台适配引擎：  \n   → 智能识别各平台格式规范（TikTok/YouTube/Instagram等）  \n   → 自动转码为最优分辨率（横屏/竖屏/方形）  \n   → 精准匹配标签系统（每个平台20+标签）  \n\n2. 发布增强功能：  \n   • 最佳发布时间计算（基于历史数据AI预测）  \n   • 评论区自动植入首条互动话术  \n   • 跨平台数据埋点追踪  \n\n（平台支持清单：  \n📱 短视频：抖音/TikTok/Reels/Shorts  \n📺 长视频：YouTube/Bilibili  \n📷 图片社交：Instagram/Pinterest  \n💬 社区论坛：Reddit/微博  \n\n（智能发布策略：  \n⏰ 时区自适应发布  \n📊 动态调整描述文案长度  \n🎚️ 智能音量标准化处理  \n\n（性能指标：  \n✓ 平均单平台发布耗时＜8秒  \n✓ 99.9% API调用成功率  \n✓ 自动重试机制（3次容错）",
        "height": 1900,
        "width": 880,
        "color": 3
      },
      "id": "fcd6f25a-f6e9-4952-8be8-37eafbf7d07f",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2700,
        240
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "🟫 第一步 — 使用AI生成视频（支持图片或文本输入）\n本步骤实现完整的AI视频生成流程\n处理流程始于接收包含文字提示或图片的Telegram消息\n（技术实现说明：\n\n支持多模态输入：\n\n📝 文本提示生成视频\n\n🖼️ 图片转视频\n\n典型工作流：\n→ 接收Telegram消息\n→ 识别内容类型\n→ 调用AI视频生成API\n→ 返回视频成品\n\n（推荐AI工具：\n▸ Runway ML - 文生视频\n▸ D-ID - 图片转动态视频\n▸ Synthesia - 虚拟主播视频生成）\n\n（参数配置提示：\n• 分辨率建议：1080x1920（竖版）\n• 视频时长：15-60秒为佳\n• 帧率设置：25/30fps）",
        "height": 760,
        "width": 2240
      },
      "id": "eb822c9d-cb51-4df7-98d6-a0941a9833bd",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        380,
        240
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "# 🟫 第二步 — 生成背景音乐\n## 本环节基于主题内容，通过GPT-4自动生成短视频配音脚本\n### 将生成的脚本转换为语音后，与AI视频进行合成处理，最终输出带完整旁白的成片\n\n（技术实现说明：\n1. 语音合成流程：\n   → GPT-4生成30-60秒短视频脚本\n   → 调用TTS引擎（如ElevenLabs）转语音\n   → 自动调节语速匹配视频长度\n2. 音视频合成：\n   • 智能对齐声画轨道\n   • 自动降噪处理\n   • 音量标准化 (-16LUFS)\n\n（推荐工具组合：\n🎵 背景音乐库：Artlist/Epidemic Sound\n🗣 语音合成：Amazon Polly/ElevenLabs\n✂️ 音视频合成：FFmpeg/Adobe Premiere自动化脚本）\n\n（质量控制参数：\n✓ 语音清晰度 ≥ 90% \n✓ 背景音乐音量低于人声6dB \n✓ 总时长误差 ±0.5秒内）",
        "height": 520,
        "width": 1500
      },
      "id": "1c209fe5-fd5a-45d7-9546-421710eb501d",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        380,
        1080
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "# 🟫 第三步 — 添加字幕提升互动率  \n## 为增强视频可访问性并提高社交平台参与度  \n## 本步骤将通过专业字幕模板为视频叠加字幕  \n\n### 最终生成包含画面、旁白和字幕的完整视频  \n\n（技术实现说明：  \n1. 字幕处理流程：  \n   → 自动识别语音内容生成SRT字幕文件  \n   → 应用预设样式模板（字体/颜色/动画）  \n   → 智能断句与时间轴校准  \n\n2. 关键增强功能：  \n   • 多语言字幕自动翻译  \n   • 重点关键词高亮显示  \n   • 适应各平台比例（9:16/1:1/16:9）  \n\n（推荐工具：  \n📜 字幕生成：Azure Speech-to-Text  \n🎨 样式设计：CapCut模板库  \n⚙️ 自动化集成：FFmpeg + Python脚本）  \n\n（优化参数：  \n✓ 字幕停留时间 ≥ 1.5秒/行  \n✓ 字体大小占屏幕高度5-8%  \n✓ 关键帧动画过渡时长0.3秒）",
        "height": 680,
        "width": 1500
      },
      "id": "0bf198f2-16f9-4ae9-aef3-919b5755da5a",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        380,
        1680
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 🟫 第四步 — 存储视频并发送Telegram通知  \n## 本步骤将自动生成视频标题和描述文案  \n## 同时将内容元数据保存至Google表格便于后续追踪  \n\n### 最终将成品视频连带描述文案发送至Telegram会话  \n### 用于内容审核或后续重复使用  \n\n（技术实现说明：  \n1. 自动化处理流程：  \n   → AI生成SEO友好型标题（GPT-4优化）  \n   → 自动提取视频关键帧生成缩略图  \n   → 结构化存储元数据（时长/大小/生成时间戳）  \n\n2. 集成功能模块：  \n   • Google Sheets API实时更新数据看板  \n   • Telegram Bot支持即时预览与快捷审批  \n   • 自动生成MD5校验码防止重复内容  \n\n（推荐技术栈：  \n📊 数据存储：Google Apps Script + Sheets  \n🤖 消息推送：Telegram Bot API  \n📝 文案优化：GPT-4 + Claude 2双引擎校验）  \n\n（质量控制标准：  \n✓ 元数据字段完整率100%  \n✓ 视频传输压缩比＜5%画质损失  \n✓ 通知响应延迟＜3秒）\n",
        "height": 1280,
        "width": 680,
        "color": 4
      },
      "id": "00c67803-c937-491e-bf2a-2d76774de07f",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1960,
        1080
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "5a08a003-68b1-48e5-8851-bb1a77d18a37",
      "name": "Trigger Telegram Prompt or Image",
      "type": "n8n-nodes-base.telegramTrigger",
      "position": [
        460,
        520
      ],
      "webhookId": "20261394-b809-4b76-9b7b-36a20af57673",
      "typeVersion": 1.1,
      "credentials": {
        "telegramApi": {
          "id": "ryRM2xi4oeAgBk0g",
          "name": "AI自动发布内容"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first().json.message.text || $input.first().json.message.caption;\n\n// Remove optional \"generate video\" prefix\nconst cleaned = input.replace(/^generate video[:]?/i, '').trim();\n\n// Split by comma\nconst parts = cleaned.split(',').map(p => p.trim());\n\n// Assign values even if missing\nconst videoPrompt = parts[0] || \"\";\nconst captionIdea = parts[1] || \"\";\nconst musicStyle = parts[2] || \"\";\n\nreturn [\n  {\n    json: {\n      videoPrompt,\n      captionIdea,\n      musicStyle\n    }\n  }\n];\n"
      },
      "id": "6c4d7dd5-7676-465a-ac02-cf7192bf70ab",
      "name": "Split Prompt or Image Input",
      "type": "n8n-nodes-base.code",
      "position": [
        660,
        520
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "8b4d3f92-c9e0-45e6-8b6a-4fa487e6b32f",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              },
              "leftValue": "={{ $('Trigger Telegram Prompt or Image').item.json.message.text }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "3c203e0c-d133-4c6f-a801-2e5dab690b8a",
      "name": "Condition Input Type (Image or Text)",
      "type": "n8n-nodes-base.if",
      "position": [
        840,
        520
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $('Trigger Telegram Prompt or Image').item.json.message.photo[3].file_id }}"
      },
      "id": "1898fd9c-2164-44d0-8ada-192107565b64",
      "name": "Download Image from Telegram",
      "type": "n8n-nodes-base.telegram",
      "position": [
        1140,
        680
      ],
      "webhookId": "1d115d8e-62c9-4f43-898e-20892b25fdb9",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "ryRM2xi4oeAgBk0g",
          "name": "AI自动发布内容"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://api.telegram.org/file/bot_YOURTOKEN/{{ $('Download Image from Telegram').item.json.result.file_path }}",
        "options": {}
      },
      "id": "6f9755e0-db11-4c3e-9d1b-f9c97c832cbd",
      "name": "Extract Image File URL",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1340,
        680
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.cloudinary.com/v1_1/dc5wapno3/image/upload",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            },
            {
              "name": "upload_preset",
              "value": "n8n_video"
            }
          ]
        },
        "options": {}
      },
      "id": "66abae9c-10ae-4845-9070-cd5f2d208782",
      "name": "Upload Image to Cloudinary",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1500,
        680
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.piapi.ai/api/v1/task",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n\"model\": \"kling\",\n\"task_type\": \"video_generation\",\n\"input\": {\n\"prompt\": \"{{ $('Split Prompt or Image Input').item.json.videoPrompt }}\",\n\"image_url\": \"{{ $json.secure_url }}\",\n\"negative_prompt\": \"\",\n\"cfg_scale\": 0.5,\n\"duration\": 5,\n\"version\": \"1.6\",\n\"camera_control\": {\n\"type\": \"simple\",\n\"config\": {\n\"horizontal\": 0,\n\"vertical\": 0,\n\"pan\": 0,\n\"tilt\": 0,\n\"roll\": 0,\n\"zoom\": 0\n}\n},\n\"mode\": \"std\"\n},\n\"config\": {\n\"service_mode\": \"\",\n\"webhook_config\": {\n\"endpoint\": \"\",\n\"secret\": \"\"\n}\n}\n}",
        "options": {}
      },
      "id": "26979ac8-6f1d-4a9b-b0b5-42b4d7165ffe",
      "name": "Convert Image to Video",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1700,
        680
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "amount": 2,
        "unit": "minutes"
      },
      "id": "36168808-54e8-4826-a3f5-bd8148da9a55",
      "name": "Wait for Image-to-Video Rendering",
      "type": "n8n-nodes-base.wait",
      "position": [
        1900,
        680
      ],
      "webhookId": "adf3489e-21ed-42de-8cc6-70c706cacbbf",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "url": "=https://api.piapi.ai/api/v1/task/{{ $json.data.task_id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "dd364492-ffcb-47e4-a24e-fb5b3c5b4ab5",
      "name": "Get Image-Based Video URL",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2100,
        680
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://backend.blotato.com/v2/videos/creations",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "blotato-api-key"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"script\": \"{{ $json.videoPrompt }}\",\n  \"style\": \"cinematic\",\n  \"template\": {\n    \"id\": \"base/pov/wakeup\"\n  }\n}\n",
        "options": {}
      },
      "id": "8a6b0c07-8304-403e-842e-ea60b0d5e939",
      "name": "Generate Video with blotato",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1200,
        360
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "amount": 2,
        "unit": "minutes"
      },
      "id": "14f39088-402d-477e-afe7-1fa8a3f0edf5",
      "name": "Wait for blotato Video Rendering",
      "type": "n8n-nodes-base.wait",
      "position": [
        1900,
        360
      ],
      "webhookId": "00fc9999-cacc-4c9b-b71b-75757c56f31e",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "url": "=https://backend.blotato.com/v2/videos/creations/{{ $json.item.id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "blotato-api-key"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "540a8cbf-0b41-4102-b2c3-a69480603cb6",
      "name": "Get blotato Video URL",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2100,
        360
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5ca907c0-f556-488d-ad59-714089b2a594",
              "name": "url_video",
              "type": "string",
              "value": "={{ $json.item.mediaUrl }}{{ $json.data.output.video_url }} "
            }
          ]
        },
        "options": {}
      },
      "id": "e549069b-0acb-44dd-ba58-d6fe76b4b782",
      "name": "Merge Video Data (Image or Prompt)",
      "type": "n8n-nodes-base.set",
      "position": [
        2440,
        680
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.piapi.ai/api/v1/task",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"Qubico/diffrhythm\",\n  \"task_type\": \"txt2audio-base\",\n  \"input\": {\n    \"style_prompt\": \"{{ $('Split Prompt or Image Input').item.json.musicStyle }}\",\n    \"lyrics\": \"\",\n    \"style_audio\": \"\"\n  },\n  \"config\": {\n    \"webhook_config\": {\n      \"endpoint\": \"\",\n      \"secret\": \"\"\n    }\n  }\n}\n",
        "options": {}
      },
      "id": "4482e940-fdee-498a-9b4c-dd44a12f04a9",
      "name": "Generate Music with Piapi",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        440,
        1280
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "amount": 2,
        "unit": "minutes"
      },
      "id": "e2187d71-aace-4cf4-8ef3-b4b14d255f54",
      "name": "Wait for Music Generation",
      "type": "n8n-nodes-base.wait",
      "position": [
        860,
        1280
      ],
      "webhookId": "ecf06ea7-0f87-42f6-939f-688e7eb20da1",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "url": "=https://api.piapi.ai/api/v1/task/{{ $json.data.task_id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "8ea22e87-0803-4618-a4cb-08a6b720838e",
      "name": "Get Music File URL",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1080,
        1280
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=You are a copywriter for short-form vertical videos.\nVideo topic:\n{{ $('Split Prompt or Image Input').first().json.captionIdea }}\nWrite two short lines of overlay text:\n\ntext1: Hook (no period)\n\ntext2: Emotional or curiosity payoff (ends with \"...\")\n\nExample:\ntext1: Why I broke up with ChatGPT\ntext2: this other AI gets me so much better...\n\nRules:\n\nMax 50 characters per line\n\nOutput only:\ntext1: ...\ntext2: ...\n\nNo quotes, brackets, emojis, hashtags, or titles\n\n"
            }
          ]
        },
        "options": {}
      },
      "id": "61b49201-e9d5-44b8-be6c-d0175596d261",
      "name": "Generate Script (GPT-4o-mini)",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "position": [
        1300,
        1280
      ],
      "typeVersion": 1.8,
      "credentials": {
        "openAiApi": {
          "id": "1rvkubxCVZvcVPTf",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first().json;\n\n// Auto-detect AI output path\nlet aiOutput = \"\";\n\nif (input?.choices?.[0]?.message?.content) {\n  aiOutput = input.choices[0].message.content;\n} else if (input?.message?.content) {\n  aiOutput = input.message.content;\n} else if (typeof input?.content === \"string\") {\n  aiOutput = input.content;\n} else {\n  // Optional: expose the input in case of failure for debug\n  throw new Error(\"❌ No valid AI output found. Check the structure of the input.\");\n}\n\nconst lines = aiOutput.split('\\n').map(l => l.trim());\nlet text1 = \"\";\nlet text2 = \"\";\n\nfor (const line of lines) {\n  if (line.toLowerCase().startsWith(\"text1:\")) {\n    text1 = line.replace(/^text1:\\s*/i, '');\n  } else if (line.toLowerCase().startsWith(\"text2:\")) {\n    text2 = line.replace(/^text2:\\s*/i, '');\n  }\n}\n\nreturn [\n  {\n    json: {\n      text1,\n      text2\n    }\n  }\n];\n"
      },
      "id": "30394110-bc11-4139-8303-f536e22733d4",
      "name": "Split Script",
      "type": "n8n-nodes-base.code",
      "position": [
        1680,
        1280
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.json2video.com/v2/movies",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpCustomAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"id\": \"qbaasr7s\",\n  \"resolution\": \"instagram-story\",\n  \"quality\": \"high\",\n  \"scenes\": [\n    {\n      \"id\": \"qyjh9lwj\",\n      \"comment\": \"Scene 1\",\n      \"elements\": []\n    }\n  ],\n  \"elements\": [\n    {\n      \"id\": \"q6dznzcv\",\n      \"type\": \"video\",\n      \"src\": \"{{ $('Merge Video Data (Image or Prompt)').item.json.url_video }}\",\n      \"resize\": \"cover\"\n    },\n    {\n      \"id\": \"top-text\",\n      \"type\": \"text\",\n      \"text\": \"{{ $json.text1 }}\",\n      \"settings\": {\n        \"font-family\": \"Libre Baskerville\",\n        \"font-size\": \"80px\",\n        \"color\": \"#ffffff\",\n        \"horizontal-position\": \"center\",\n        \"vertical-position\": \"top\",\n        \"margin-top\": \"100px\",\n        \"word-break\": \"break-word\",\n        \"overflow-wrap\": \"break-word\",\n        \"font-weight\": \"normal\",\n        \"text-shadow\": \"3px 3px 0 #000, -3px -3px 0 #000, 3px -3px 0 #000, -3px 3px 0 #000, 0px 3px 0 #000, 3px 0px 0 #000, -3px 0px 0 #000, 0px -3px 0 #000\"\n      }\n    },\n    {\n      \"id\": \"bottom-text\",\n      \"type\": \"text\",\n      \"text\": \"{{ $json.text2 }}\",\n      \"settings\": {\n        \"font-family\": \"Libre Baskerville\",\n        \"font-size\": \"80px\",\n        \"color\": \"#ffffff\",\n        \"horizontal-position\": \"center\",\n        \"vertical-position\": \"bottom\",\n        \"margin-bottom\": \"250px\",\n        \"word-break\": \"break-word\",\n        \"overflow-wrap\": \"break-word\",\n        \"font-weight\": \"normal\",\n        \"text-shadow\": \"3px 3px 0 #000, -3px -3px 0 #000, 3px -3px 0 #000, -3px 3px 0 #000, 0px 3px 0 #000, 3px 0px 0 #000, -3px 0px 0 #000, 0px -3px 0 #000\"\n      }\n    },\n    {\n      \"id\": \"music-track\",\n      \"type\": \"audio\",\n      \"src\": \"{{ $('Get Music File URL').item.json.data.output.audio_url }}\",\n      \"volume\": 0.5,\n      \"duration\": -2\n    }\n  ]\n}\n",
        "options": {}
      },
      "id": "15d7845c-0e0b-4f06-b48e-5ea8add6501a",
      "name": "Merge Video + Music",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        460,
        1880
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "amount": 1,
        "unit": "minutes"
      },
      "id": "5b014111-3dfc-4190-83cf-b5915a47df1b",
      "name": "Wait for Fusion Completion",
      "type": "n8n-nodes-base.wait",
      "position": [
        640,
        1880
      ],
      "webhookId": "8d188124-8aeb-49b0-bdf8-5a9f42e205e5",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "url": "=https://api.json2video.com/v2/movies?id={{ $json.project }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpCustomAuth",
        "options": {}
      },
      "id": "fdc02ec0-b3ce-49e3-9f20-096c679eacbe",
      "name": "Get Final Video URL",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        880,
        1880
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Write a short social media caption from this topic:\n{{ $('Split Prompt or Image Input').first().json.captionIdea }}\n\nMake it actionable, not generic or motivational.\nAdd 1 problem + 1 specific solution.\nUse 1 sentence per line, with an empty line between each.\ndon't asking them to comment.\nMaximum 150 characters\n\n🧠 Caption Guidelines:\nKeep it short, compelling, and value-driven.\n\nAvoid generic motivational fluff — focus on real, actionable insight or highlight a problem/solution pattern.\n\n\nStructure:\n\nOne sentence per line.\n\nNote: Do not use this character: \" in the result.\nReturn a single short paragraph with no line breaks and no special characters.\nNote: Do not use this character: \" in the result."
            }
          ]
        },
        "options": {}
      },
      "id": "9b865654-337a-4dd5-89d4-4a131f6eed75",
      "name": "Generate Social Caption (GPT-4)",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "position": [
        1100,
        1880
      ],
      "typeVersion": 1.8,
      "credentials": {
        "openAiApi": {
          "id": "1rvkubxCVZvcVPTf",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Act as a YouTube Title Expert.\nBased on the following video description:\n{{ $('Split Prompt or Image Input').first().json.captionIdea }}\nGenerate a short, punchy, and curiosity-driven YouTube video title that makes people want to click.\nMake it feel urgent, valuable, or surprising — and avoid generic or boring phrases.\nKeep it under 70 characters. Return only the title, no explanations.\nNote: The title must be free of special characters and the character \". Return only a plain text title.\n- Do not start the title with this character : \"\n- Do not finish the title with this character : \"\n- You Never user this character : \" in the title\n"
            }
          ]
        },
        "options": {}
      },
      "id": "99a4282b-5d68-4f4d-8b1e-c7975221b92f",
      "name": "Generate SEO Title (GPT-4)",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "position": [
        1540,
        1880
      ],
      "typeVersion": 1.8,
      "credentials": {
        "openAiApi": {
          "id": "1rvkubxCVZvcVPTf",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "mode": "id",
          "value": "="
        },
        "sheetName": {
          "__rl": true,
          "mode": "id",
          "value": "="
        },
        "columns": {
          "value": {
            "url ": "={{ $('Get Final Video URL').item.json.movie.url }}",
            "Title": "={{ $json.message.content }}",
            "caption": "={{ $('Generate Social Caption (GPT-4)').item.json.message.content }}"
          },
          "schema": [
            {
              "id": "url ",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "url ",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "caption",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "caption",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Title",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "Title",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "status",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "status",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "3cbe9fb8-1685-4169-9ee1-3ae72f3190e3",
      "name": "Append Video Data to Google Sheet",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        2020,
        1160
      ],
      "typeVersion": 4.5,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "ZUshZqZwcVJVtSfD",
          "name": "Google Sheets"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Trigger Telegram Prompt or Image').first().json.message.chat.id }}",
        "text": "=Here's your scheduled video:\n----------------\nCaption Text: {{ $json.caption }}\n----------------\nVideo Link: {{ $json['url '] }}",
        "additionalFields": {}
      },
      "id": "dd947cd3-747f-484f-93ea-990d977ab113",
      "name": "Send Final Video to Telegram",
      "type": "n8n-nodes-base.telegram",
      "position": [
        2240,
        1160
      ],
      "webhookId": "3046e11e-60db-4fcf-9351-22758c833f83",
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "operation": "sendVideo",
        "chatId": "={{ $json.result.chat.id }}",
        "file": "={{ $('Append Video Data to Google Sheet').item.json['url '] }}",
        "additionalFields": {}
      },
      "id": "c17efd9a-2428-4c36-acd8-69c47d01b961",
      "name": "Send Caption to Telegram",
      "type": "n8n-nodes-base.telegram",
      "position": [
        2440,
        1160
      ],
      "webhookId": "1282505d-dcc3-4dbd-9657-fb1362033382",
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"instagram_id\": \"1111\",\n  \"youtube_id\": \"2222\",\n  \"threads_id\": \"3333\",\n  \"tiktok_id\": \"4444\",\n  \"facebook_id\": \"5555\",\n  \"facebook_page_id\": \"6666\",\n  \"twitter_id\": \"7777\",\n  \"linkedin_id\": \"8888\",\n  \"pinterest_id\": \"9999\",\n  \"pinterest_board_id\": \"1010\",\n  \"bluesky_id\": \"11111111\"\n}\n",
        "options": {}
      },
      "id": "b3311fa9-c473-4bd1-8de7-0930c4e799cd",
      "name": "Assign Platform IDs for Blotato",
      "type": "n8n-nodes-base.set",
      "position": [
        2740,
        1160
      ],
      "typeVersion": 3.4
    }
  ],
  "pinData": {},
  "settings": {},
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-04-24T07:42:11.000Z",
  "versionId": "e87f5301-4794-44fa-83f5-0ea5d8e28347"
}